Index: ../../Libraries/open-powerplant/PowerPlant/File and Stream Classes/LFile.cp
===================================================================
--- ../../Libraries/open-powerplant/PowerPlant/File and Stream Classes/LFile.cp	(revision 15)
+++ ../../Libraries/open-powerplant/PowerPlant/File and Stream Classes/LFile.cp	(working copy)
@@ -36,9 +36,6 @@
 
 LFile::LFile()
 {
-	mMacFileSpec.vRefNum	= 0;
-	mMacFileSpec.parID		= 0;
-	mMacFileSpec.name[0]	= 0;
 	mDataForkRefNum			= refNum_Undefined;
 	mResourceForkRefNum		= refNum_Undefined;
 }
@@ -50,9 +47,9 @@
 //	Construct a File from a Toolbox File System Specification
 
 LFile::LFile(
-	const FSSpec&	inFileSpec)
+	const PPx::FSObject&	inFileRef)
 {
-	mMacFileSpec		= inFileSpec;
+	mMacFileRef			= inFileRef;
 	mDataForkRefNum		= refNum_Undefined;
 	mResourceForkRefNum	= refNum_Undefined;
 }
@@ -70,14 +67,18 @@
 LFile::LFile(
 	AliasHandle		inAlias,
 	Boolean&		outWasChanged,
-	FSSpec*			inFromFile)
+	PPx::FSObject*	inFromFile)
 {
-	OSErr	err = ::ResolveAlias(inFromFile, inAlias, &mMacFileSpec,
+	FSRef newFile;
+	OSErr	err = ::FSResolveAlias(inFromFile ? &inFromFile->UseRef() : nil, inAlias, &newFile,
 								&outWasChanged);
 
 	mDataForkRefNum		= refNum_Undefined;
 	mResourceForkRefNum = refNum_Undefined;
 
+	if (err == noErr)
+		mMacFileRef = newFile;
+
 	ThrowIfOSErr_(err);
 }
 
@@ -109,9 +110,9 @@
 
 void
 LFile::GetSpecifier(
-	FSSpec&		outFileSpec) const
+	PPx::FSObject&		outFileRef) const
 {
-	outFileSpec = mMacFileSpec;		// Copy FSSpec struct
+	outFileRef = mMacFileRef;		// Copy FSRef struct
 }
 
 
@@ -125,39 +126,37 @@
 
 void
 LFile::SetSpecifier(
-	const FSSpec&	inFileSpec)
+	const PPx::FSObject&	inFileRef)
 {
 	CloseDataFork();
 	CloseResourceFork();
 
-	mMacFileSpec = inFileSpec;
+	mMacFileRef = inFileRef;
 }
 
 
 // ---------------------------------------------------------------------------
 //	¥ UsesSpecifier
 // ---------------------------------------------------------------------------
-//	Returns whether the File's FSSpec is the same as the input FSSpec
+//	Returns whether the File's FSRef is the same as the input FSRef
 
 bool
 LFile::UsesSpecifier(
-	const FSSpec&	inFileSpec) const
+	const PPx::FSObject&	inFileRef) const
 {
-	return EqualFileSpec(mMacFileSpec, inFileSpec);
+	return EqualFileSpec(mMacFileRef, inFileRef);
 }
 
 
 // ---------------------------------------------------------------------------
 //	¥ SpecifierExists
 // ---------------------------------------------------------------------------
-//	Returns whether the File's FSSpec corresponds to an existing disk file
+//	Returns whether the File's FSRef corresponds to an existing disk file
 
 bool
 LFile::SpecifierExists() const
 {
-	FInfo	finderInfo;			// File exists if we can get its Finder info
-	
-	return (::FSpGetFInfo(&mMacFileSpec, &finderInfo) == noErr);
+	return mMacFileRef.Exists();
 }
 
 
@@ -171,10 +170,10 @@
 
 AliasHandle
 LFile::MakeAlias(
-	FSSpec*		inFromFile)
+	PPx::FSObject*		inFromFile)
 {
 	AliasHandle	theAlias;
-	::NewAlias(inFromFile, &mMacFileSpec, &theAlias);
+	OSErr	err = ::FSNewAlias(&inFromFile->UseRef(), &mMacFileRef.UseRef(), &theAlias);
 
 	return theAlias;
 }
@@ -194,10 +193,33 @@
 LFile::CreateNewFile(
 	OSType		inCreator,
 	OSType		inFileType,
-	ScriptCode	inScriptCode)
+	ScriptCode	/* inScriptCode */)
 {
-	::FSpCreateResFile(&mMacFileSpec, inCreator, inFileType, inScriptCode);
-	ThrowIfResError_();
+	// Don't bother if already exists
+	if (mMacFileRef.Exists())
+		return;
+
+	FSCatalogInfo	catInfo;
+	FInfo*			finderInfo = (FInfo *) &catInfo.finderInfo;
+	
+	::BlockZero(finderInfo, sizeof(FInfo));
+	
+	finderInfo->fdType		= inFileType;
+	finderInfo->fdCreator	= inCreator;
+
+	FSRef parentRef;
+	mMacFileRef.GetParent(parentRef);
+
+	HFSUniStr255 fileName;
+	mMacFileRef.GetName(fileName);
+
+	FSRef fileRef;
+	OSStatus err = ::FSCreateFileUnicode(&parentRef, fileName.length,
+											fileName.unicode, kFSCatInfoFinderInfo,
+											&catInfo, &fileRef, NULL);
+	ThrowIfOSErr_(err);
+	
+	mMacFileRef = fileRef;
 }
 
 
@@ -218,9 +240,8 @@
 	OSType		inFileType,
 	ScriptCode	inScriptCode)
 {
-	OSErr	err = ::FSpCreate(&mMacFileSpec, inCreator, inFileType,
-								inScriptCode);
-	ThrowIfOSErr_(err);
+	// Just create the file
+	CreateNewFile(inCreator, inFileType, inScriptCode);
 }
 
 
@@ -236,11 +257,23 @@
 LFile::OpenDataFork(
 	SInt16	inPrivileges)
 {
-	OSErr	err = ::FSpOpenDF(&mMacFileSpec, (SInt8) inPrivileges, &mDataForkRefNum);
-	if (err != noErr) {
-		mDataForkRefNum = refNum_Undefined;
-		Throw_(err);
+	HFSUniStr255 forkName = { 0 };
+	::FSGetDataForkName(&forkName);
+
+	OSStatus err = ::FSCreateFork(&mMacFileRef.UseRef(), forkName.length, forkName.unicode);
+	if ((err != noErr) && (err != errFSForkExists)) {
+		ThrowIfOSErr_(err);
 	}
+
+	SInt16 forkRefNum;
+	err = ::FSOpenFork(&mMacFileRef.UseRef(), forkName.length, forkName.unicode,
+						inPrivileges, &forkRefNum);
+	ThrowIfOSErr_(err);
+
+	mDataForkRefNum = forkRefNum;
+
+	err = ::FSSetForkPosition(mDataForkRefNum, fsFromStart, 0);
+
 	return mDataForkRefNum;
 }
 
@@ -254,11 +287,11 @@
 LFile::CloseDataFork()
 {
 	if (mDataForkRefNum != refNum_Undefined) {
-		OSErr	err = ::FSClose(mDataForkRefNum);
+		OSErr	err = ::FSCloseFork(mDataForkRefNum);
 		mDataForkRefNum = refNum_Undefined;
 		ThrowIfOSErr_(err);
 
-		::FlushVol(nil, mMacFileSpec.vRefNum);
+		::FlushVol(nil, mMacFileRef.GetVolume());
 	}
 }
 
@@ -272,18 +305,18 @@
 Handle
 LFile::ReadDataFork()
 {
-	SInt32	fileLength;
-	OSErr	err = ::GetEOF(mDataForkRefNum, &fileLength);
+	SInt64		forkSize;
+	OSStatus	err = ::FSGetForkSize(mDataForkRefNum, &forkSize);
 	ThrowIfOSErr_(err);
 
+	SInt32 		fileLength = forkSize;
 	StHandleBlock	dataHandle(fileLength);
 
-	err = ::SetFPos(mDataForkRefNum, fsFromStart, 0);
+	ByteCount bytesRead;
+	err = ::FSReadFork(mDataForkRefNum, fsFromStart, 0,
+								fileLength, *dataHandle, &bytesRead);
 	ThrowIfOSErr_(err);
 
-	err = ::FSRead(mDataForkRefNum, &fileLength, *dataHandle);
-	ThrowIfOSErr_(err);
-
 	return dataHandle.Release();
 }
 
@@ -300,16 +333,11 @@
 	const void*		inBuffer,
 	SInt32			inByteCount)
 {
-	SInt32	bytesWritten = inByteCount;
-
-	OSErr	err = ::SetFPos(mDataForkRefNum, fsFromStart, 0);
+	ByteCount bytesWritten = inByteCount;
+	OSStatus err = ::FSWriteFork(mDataForkRefNum, fsFromStart, 0,
+									inByteCount, inBuffer, &bytesWritten);
 	ThrowIfOSErr_(err);
 
-	err = ::FSWrite(mDataForkRefNum, &bytesWritten, inBuffer);
-	::SetEOF(mDataForkRefNum, bytesWritten);
-
-	ThrowIfOSErr_(err);
-
 	return bytesWritten;
 }
 
@@ -326,12 +354,22 @@
 LFile::OpenResourceFork(
 	SInt16	inPrivileges)
 {
-	mResourceForkRefNum = ::FSpOpenResFile(&mMacFileSpec, (SInt8) inPrivileges);
+	HFSUniStr255 forkName = { 0 };
+	::FSGetResourceForkName(&forkName);
 
+	OSStatus err = ::FSCreateResourceFork(&mMacFileRef.UseRef(), forkName.length, forkName.unicode, 0);
+	if ((err != noErr) && (err != errFSForkExists)) {
+		ThrowIfOSErr_(err);
+	}
+
+	mResourceForkRefNum = ::FSOpenResFile(&mMacFileRef.UseRef(), (SInt8) inPrivileges);
+
 	if (mResourceForkRefNum == -1) {	// Open failed
 		ThrowIfResError_();
 	}
 
+	err = ::FSSetForkPosition(mResourceForkRefNum, fsFromStart, 0);
+
 	return mResourceForkRefNum;
 }
 
@@ -347,7 +385,7 @@
 	if (mResourceForkRefNum != refNum_Undefined) {
 		::CloseResFile(mResourceForkRefNum);
 		mResourceForkRefNum = refNum_Undefined;
-		::FlushVol(nil, mMacFileSpec.vRefNum);
+		::FlushVol(nil, mMacFileRef.GetVolume());
 	}
 }
 
@@ -355,20 +393,18 @@
 // ---------------------------------------------------------------------------
 //	¥ EqualFileSpec													  [static]
 // ---------------------------------------------------------------------------
-//	Compare two FSSpec structs for equality
+//	Compare two FSRef structs for equality
 
 bool
 LFile::EqualFileSpec(
-	const FSSpec&	inFileSpecA,
-	const FSSpec&	inFileSpecB)
+	const PPx::FSObject&	inFileSpecA,
+	const PPx::FSObject&	inFileSpecB)
 {
-		// Compare each field in FSSpec struct
+		// Compare each field in FSRef struct
 		//   EqualString() [case insensitive, diacritical sensitive] is
 		//   the same comparison used by the File System
 
-	return (inFileSpecA.vRefNum == inFileSpecB.vRefNum) &&
-		   (inFileSpecA.parID == inFileSpecB.parID) &&
-		   ::EqualString(inFileSpecA.name, inFileSpecB.name, false, true);
+	return inFileSpecA.IsEqualTo(inFileSpecB);
 }
 
 
